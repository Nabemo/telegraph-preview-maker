class TelegraphManager {
    constructor() {
        this.supabaseUrl = '';
        this.apiKey = '';
        this.headers = {};
    }

    initialize(url, key) {
        this.supabaseUrl = url;
        this.apiKey = key;
        this.headers = {
            'apikey': key,
            'Authorization': `Bearer ${key}`,
            'Content-Type': 'application/json',
            'Prefer': 'return=representation'
        };
    }

    async testConnection() {
        try {
            const response = await fetch(`${this.supabaseUrl}/rest/v1/articles?select=count`, {
                method: 'GET',
                headers: this.headers
            });

            if (response.ok) {
                this.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                return true;
            } else {
                const errorData = await response.json();
                throw new Error(`–û—à–∏–±–∫–∞: ${response.status} - ${errorData.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
            }
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
            return false;
        }
    }

    async createArticle(articleData) {
        try {
            const response = await fetch(`${this.supabaseUrl}/rest/v1/articles`, {
                method: 'POST',
                headers: this.headers,
                body: JSON.stringify(articleData)
            });

            if (response.ok) {
                const result = await response.json();
                this.log('‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
                return result;
            } else {
                const errorData = await response.json();
                throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${response.status} - ${errorData.message}`);
            }
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: ${error.message}`);
            throw error;
        }
    }

    async getArticles() {
        try {
            const response = await fetch(`${this.supabaseUrl}/rest/v1/articles?select=*&order=created_at.desc`, {
                method: 'GET',
                headers: this.headers
            });

            if (response.ok) {
                const articles = await response.json();
                this.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: ${articles.length}`);
                return articles;
            } else {
                const errorData = await response.json();
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status} - ${errorData.message}`);
            }
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–µ–π: ${error.message}`);
            throw error;
        }
    }

    async updateArticle(id, updates) {
        try {
            const response = await fetch(`${this.supabaseUrl}/rest/v1/articles?id=eq.${id}`, {
                method: 'PATCH',
                headers: this.headers,
                body: JSON.stringify(updates)
            });

            if (response.ok) {
                this.log(`‚úèÔ∏è –°—Ç–∞—Ç—å—è ${id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
                return true;
            } else {
                const errorData = await response.json();
                throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${response.status} - ${errorData.message}`);
            }
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: ${error.message}`);
            throw error;
        }
    }

    async deleteArticle(id) {
        try {
            const response = await fetch(`${this.supabaseUrl}/rest/v1/articles?id=eq.${id}`, {
                method: 'DELETE',
                headers: this.headers
            });

            if (response.ok) {
                this.log(`üóëÔ∏è –°—Ç–∞—Ç—å—è ${id} —É–¥–∞–ª–µ–Ω–∞`);
                return true;
            } else {
                const errorData = await response.json();
                throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${response.status} - ${errorData.message}`);
            }
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: ${error.message}`);
            throw error;
        }
    }

    log(message) {
        const logsContainer = document.getElementById('logs');
        const logEntry = document.createElement('div');
        logEntry.className = 'log-entry';
        logEntry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
        logsContainer.appendChild(logEntry);
        logsContainer.scrollTop = logsContainer.scrollHeight;
    }
}

class StorageManager {
    constructor() {
        this.supabaseUrl = '';
        this.apiKey = '';
    }

    initialize(url, key) {
        this.supabaseUrl = url;
        this.apiKey = key;
    }

    async uploadFile(file, bucketName = 'telegraph') {
        const formData = new FormData();
        formData.append('file', file);

        try {
            const response = await fetch(
                `${this.supabaseUrl}/storage/v1/object/${bucketName}/${file.name}`,
                {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${this.apiKey}`,
                    },
                    body: formData
                }
            );

            if (response.ok) {
                const data = await response.json();
                telegrapher.log(`‚úÖ –§–∞–π–ª "${file.name}" –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                return data;
            } else {
                const errorData = await response.json();
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status} - ${errorData.message}`);
            }
        } catch (error) {
            telegrapher.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
            throw error;
        }
    }

    getFileUrl(filePath, bucketName = 'telegraph') {
        return `${this.supabaseUrl}/storage/v1/object/public/${bucketName}/${filePath}`;
    }
}

const telegrapher = new TelegraphManager();
const storageManager = new StorageManager();
let currentImageUrl = '';

function updateConnectionStatus(status, message) {
    const statusElement = document.getElementById('connection-status');
    const statusText = statusElement.querySelector('.status-text');
    const statusIndicator = statusElement.querySelector('.status-indicator');
    
    statusElement.className = 'connection-status ' + status;
    statusText.textContent = message;
    
    statusIndicator.className = 'status-indicator status-' + status;
}

async function testConnection() {
    const url = document.getElementById('supabase-url').value;
    const key = document.getElementById('api-key').value;

    if (!url || !key) {
        updateConnectionStatus('disconnected', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ URL –∏ API –∫–ª—é—á');
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        return;
    }

    updateConnectionStatus('pending', '–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');

    telegrapher.initialize(url, key);
    storageManager.initialize(url, key);
    
    try {
        const isConnected = await telegrapher.testConnection();
        
        if (isConnected) {
            updateConnectionStatus('connected', '‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω! –ú–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å');
            localStorage.setItem('supabase_url', url);
            localStorage.setItem('supabase_key', key);
        } else {
            updateConnectionStatus('disconnected', '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        }
    } catch (error) {
        updateConnectionStatus('disconnected', '‚ùå –û—à–∏–±–∫–∞: ' + error.message);
    }
}

async function uploadImage() {
    const fileInput = document.getElementById('article-image');
    const file = fileInput.files[0];
    
    if (!file) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
        return;
    }

    try {
        const result = await storageManager.uploadFile(file);
        currentImageUrl = await storageManager.getFileUrl(file.name);
        
        const preview = document.getElementById('image-preview');
        preview.innerHTML = `
            <img src="${currentImageUrl}" style="max-width: 200px; margin-top: 10px; border-radius: 5px;">
            <p>–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${file.name}</p>
        `;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    }
}

async function createArticle() {
    const title = document.getElementById('article-title').value;
    const author = document.getElementById('article-author').value;
    const content = document.getElementById('article-content').value;

    if (!title || !content) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏');
        return;
    }

    const articleData = {
        title: title,
        author: author,
        content: content,
        created_at: new Date().toISOString(),
        views: 0,
        likes: 0
    };

    if (currentImageUrl) {
        articleData.image_url = currentImageUrl;
    }

    try {
        await telegrapher.createArticle(articleData);
        
        document.getElementById('article-title').value = '';
        document.getElementById('article-author').value = '';
        document.getElementById('article-content').value = '';
        document.getElementById('article-image').value = '';
        document.getElementById('image-preview').innerHTML = '';
        currentImageUrl = '';
        
        await loadArticles();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
    }
}

async function loadArticles() {
    try {
        const articles = await telegrapher.getArticles();
        displayArticles(articles);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–µ–π:', error);
    }
}

function displayArticles(articles) {
    const container = document.getElementById('articles-list');
    container.innerHTML = '';

    if (articles.length === 0) {
        container.innerHTML = '<p>–°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        return;
    }

    articles.forEach(article => {
        const articleCard = document.createElement('div');
        articleCard.className = 'article-card';
        
        let imageHtml = '';
        if (article.image_url) {
            imageHtml = `<img src="${article.image_url}" class="article-image" alt="${article.title}">`;
        }
        
        articleCard.innerHTML = `
            ${imageHtml}
            <h3>${article.title}</h3>
            <div class="article-meta">
                <strong>–ê–≤—Ç–æ—Ä:</strong> ${article.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'} |
                <strong>–î–∞—Ç–∞:</strong> ${new Date(article.created_at).toLocaleDateString()}
            </div>
            <p>${article.content.substring(0, 100)}${article.content.length > 100 ? '...' : ''}</p>
            <div class="article-meta">
                <span>üëÅÔ∏è ${article.views} | üëç ${article.likes}</span>
            </div>
            <button onclick="editArticle(${article.id})">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
            <button onclick="deleteArticle(${article.id})" class="btn-danger">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
        `;
        
        container.appendChild(articleCard);
    });
}

async function editArticle(id) {
    const newTitle = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:');
    if (newTitle) {
        try {
            await telegrapher.updateArticle(id, { title: newTitle });
            await loadArticles();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        }
    }
}

async function deleteArticle(id) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Ç–∞—Ç—å—é?')) {
        try {
            await telegrapher.deleteArticle(id);
            await loadArticles();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        }
    }
}

document.addEventListener('DOMContentLoaded', function() {
    const savedUrl = localStorage.getItem('supabase_url');
    const savedKey = localStorage.getItem('supabase_key');
    
    if (savedUrl) document.getElementById('supabase-url').value = savedUrl;
    if (savedKey) document.getElementById('api-key').value = savedKey;
    
    if (savedUrl && savedKey) {
        setTimeout(testConnection, 1000);
    }
    
    telegrapher.log('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegraph Manager –∑–∞–ø—É—â–µ–Ω–æ');
    telegrapher.log('üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase –∏ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É');
});